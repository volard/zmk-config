#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// --------------- mouse
// https://zmk.dev/docs/keymaps/behaviors/mouse-emulation#advanced-configuration
#define ZMK_POINTING_DEFAULT_MOVE_VAL 600  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 10    // default: 10

#include <dt-bindings/zmk/pointing.h>
// ----------------------




/ {

    // https://zmk.dev/docs/config/behaviors#two-axis-input
    // &mmv { // mouse movement
    //     x-input-code = <INPUT_REL_X>;
    //     y-input-code = <INPUT_REL_Y>;
    //     time-to-max-speed-ms = <500>;
    //     acceleration-exponent = <1>;
    // };

    // &msc { // mouse scroll
    //     x-input-code = <INPUT_REL_HWHEEL>;
    //     y-input-code = <INPUT_REL_WHEEL>;
    //     time-to-max-speed-ms = <500>;
    //     // 0 - uniform speed, 1 - uniform acceleration, 2 - linear acceleration
    //     acceleration-exponent = <1>;
    // };

    // https://zmk.dev/docs/keymaps/behaviors/soft-off
    // &soft_off {
    //    split-peripheral-off-on-press; // Turn peripheral off immediately for reliability
    //    hold-time-ms = <5000>;         // Only turn off it the key is held for 5 seconds or longer.
    // };



    // https://zmk.dev/docs/keymaps/conditional-layers
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    kscan: kscan {
        compatible = "zmk,kscan-gpio-matrix";
        diode-direction = "col2row";
        wakeup-source;
    };

    // behaviors {
        // https://zmk.dev/docs/features/low-power-states#wakeup-sources
       


        /**
        * Based on https://zmk.dev/docs/keymaps/behaviors/macros#layer-activation--more

        * Temporarily switches to a layer 1 while a LALT modifier is held.
        * Analogous to QMK's `LM()`, using a parameterized macro (https://docs.qmk.fm/feature_layers#switching-and-toggling-layers).
        *
        * Used to switch between workspaces in window managers with ALT as Mod key while pressing only two keys on a keyboard
        */
        // lm: lm {
        //     compatible = "zmk,behavior-macro-two-param";
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     #binding-cells = <0>; // amount of arguments
        //     bindings
        //         = 
        //         // switch to the layer and hold LALT
        //         , <&macro_press &mo 1>, <&macro_press &kp LALT>
                
        //         // wait for physical key release..?
        //         , <&macro_pause_for_release>

        //         // perform software release of two keys on one physical key release
        //         , <&macro_release &kp LALT>, <&macro_release &mo 1>
        //         ;
        // };  


        // // Switch window's manager workspace on hold or press LGUI on tap
        // wssw: wssw { 
        //     compatible = "zmk,behavior-mod-morph";
        //     #binding-cells = <0>; // amount of arguments
        //     // tap, hold
        //     bindings = <&kp LGUI>, <&lm>;
        // };
    // };



    keymap {
        compatible = "zmk,keymap";

        default_layer { // 0th
            bindings = <
//┌─────────┬────────┬────────┬────────┬────────┬────────┐                          ┌────────┬────────┬────────┬────────┬────────┬────────┐
   &gresc    &kp Q    &kp W    &kp E    &kp R    &kp T                               &kp Y    &kp U     &kp I    &kp O   &kp P    &kp BSPC
//├─────────┼────────┼────────┼────────┼────────┼────────┤                          ├────────┼────────┼────────┼────────┼────────┼────────┤   
   &kp LSHFT  &kp A    &kp S    &kp D    &kp F    &kp G                               &kp H    &kp J     &kp K    &kp L   &kp SEMI &kp SQT
//├─────────┼────────┼────────┼────────┼────────┼────────┤                          ├────────┼────────┼────────┼────────┼────────┼────────┤
   &kp LCTRL  &kp Z    &kp X    &kp C    &kp V    &kp B                               &kp N    &kp M   &kp COMMA  &kp DOT &kp FSLH &kp TAB
//└─────────┴────────┴────────┴────────┴────────┴────────┘                          └────────┴────────┴────────┴────────┴────────┴────────┘
//                                  ┌────────┬────────┬────────┐            ┌────────┬────────┬────────┐
                                     &kp LGUI    &mo 1  &kp SPACE              &kp RET  &mo 2   &kp LALT
//                                  └────────┴────────┴────────┘            └────────┴────────┴────────┘
            >;
     };

        lower_layer { // 1st
            bindings = <
//┌──────────┬────────────┬────────────┬────────────┬──────────┬────────┐      ┌────────────┬──────────────┬───────────────┬───────────────┬────────────────┬─────────────────┐     
    &kp N1      &kp N2       &kp N3       &kp UP       &kp N4    &kp N5           &kp N6         &kp N7      &mmv MOVE_UP    &kp N8           &kp N9          &kp N0
//├──────────┼────────────┼────────────┼────────────┼──────────┼────────┤      ├────────────┼──────────────┼───────────────┼───────────────┼────────────────┼─────────────────┤
    &kp LSHFT    &trans       &kp LEFT    &kp DOWN    &kp RIGHT  &trans           &mkp LCLK   &mmv MOVE_LEFT  &mmv MOVE_DOWN &mmv MOVE_RIGHT   &mkp RCLK        &msc SCRL_UP
//├──────────┼────────────┼────────────┼────────────┼──────────┼────────┤      ├────────────┼──────────────┼───────────────┼───────────────┼────────────────┼─────────────────┤
    &kp LCTRL   &trans        &trans       &trans     &kp BSPC   &kp DEL         &kp PSCRN      &trans          &trans          &trans        &trans          &msc SCRL_DOWN
//└──────────┴────────────┴────────────┴────────────┴──────────┴────────┘      └────────────┴──────────────┴───────────────┴───────────────┴────────────────┴─────────────────┘
//                                           ┌────────┬────────┬────────┐      ┌────────┬────────┬────────┐
                                              &kp LGUI  &trans  &kp SPACE       &kp RET  &trans   &kp LALT
//                                           └────────┴────────┴────────┘      └────────┴────────┴────────┘
            >;
        };

        raise_layer { // 2nd
            bindings = <
//┌──────────┬────────────┬────────────┬────────────┬──────────┬────────┐      ┌────────────┬──────────────┬───────────────┬───────────────┬────────────────┬─────────────────┐     
    &kp EXCL     &kp AT    &kp HASH     &kp PAGE_UP   &kp DLLR  &kp PRCNT        &kp CARET     &kp AMPS       &kp ASTRK       &kp LPAR        &kp RPAR         &trans
//├──────────┼────────────┼────────────┼────────────┼──────────┼────────┤      ├────────────┼──────────────┼───────────────┼───────────────┼────────────────┼─────────────────┤
   &kp LSHFT  &kp C_VOL_UP  &kp HOME   &kp PAGE_DOWN  &kp END    &trans          &kp MINUS     &kp EQUAL      &kp LBKT        &kp RBKT        &kp BSLH          &kp GRAVE
//├──────────┼────────────┼────────────┼────────────┼──────────┼────────┤      ├────────────┼──────────────┼───────────────┼───────────────┼────────────────┼─────────────────┤
   &kp LCTRL  &kp C_VOL_DN  &kp C_MUTE    &trans       &trans    &trans          &kp UNDER     &kp PLUS       &kp LBRC        &kp RBRC        &kp PIPE          &kp TILDE
//└──────────┴────────────┴────────────┴────────────┴──────────┴────────┘      └────────────┴──────────────┴───────────────┴───────────────┴────────────────┴─────────────────┘
//                                           ┌────────┬────────┬────────┐      ┌────────┬────────┬────────┐
                                              &kp LGUI  &trans  &kp SPACE       &kp RET   &trans  &kp LALT
//                                           └────────┴────────┴────────┘      └────────┴────────┴────────┘
            >;
        };

        both_layer { // 3rd
            bindings = <
//┌────────────┬────────────┬────────────┬────────────┬──────────┬────────┐      ┌────────────┬──────────────┬───────────────┬───────────────┬────────────────┬─────────────────┐     
   &kp F1        &kp F2         &kp F3       &kp F4      &kp F5    &kp F6           &kp F7        &kp F8        &kp F9           &kp F10        &kp F11          &kp F12
//├────────────┼────────────┼────────────┼────────────┼──────────┼────────┤      ├────────────┼──────────────┼───────────────┼───────────────┼────────────────┼─────────────────┤
   &trans         &trans       &trans       &trans       &trans    &trans          &trans        &trans         &trans            &trans         &trans          &trans
//├────────────┼────────────┼────────────┼────────────┼──────────┼────────┤      ├────────────┼──────────────┼───────────────┼───────────────┼────────────────┼─────────────────┤
   &out OUT_TOG   &soft_off     &trans       &trans       &trans    &trans         &bt BT_SEL 0  &bt BT_SEL 1   &bt BT_SEL 2       &trans       &trans            &bt BT_CLR
//└────────────┴────────────┴────────────┴────────────┴──────────┴────────┘      └────────────┴──────────────┴───────────────┴───────────────┴────────────────┴─────────────────┘
//                                           ┌────────┬────────┬────────┐      ┌────────┬────────┬────────┐
                                              &trans    &trans   &trans          &trans   &trans   &trans
//                                           └────────┴────────┴────────┘      └────────┴────────┴────────┘
            >;
        };
    };
};
